[tool.poetry]
name = "meltano"
version = "1.81.0"
description = "Meltano"
authors = ["Meltano Team and Contributors <meltano@gitlab.com>"]
license = "MIT"
readme = "README.md"
repository = "https://gitlab.com/meltano/meltano"
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
include = [
  "LICENSE",
  "*.m5o"
]

[tool.poetry.dependencies]
python = ">=3.6.2,<3.10"
aiohttp = "^3.4.4"
alembic = "^1.5.0"
async_generator = "^1.10"
atomicwrites = "^1.2.1"
authlib = "^0.10"
bcrypt = "^3.2.0"  # Needs to be installed explicitly so it can be used as a backend for passlib
click = "^7.0"
click-default-group = "^1.2.1"
email-validator = "^1.1.2"
fasteners = "^0.15.0"
flask = "^1.1.2"
flask-cors = "^3.0.7"
flask-executor = "^0.9.2"
flask-restful = "^0.3.7"
flask-sqlalchemy = "^2.4.4"
flatten-dict = "^0.1.0"
gunicorn = "^19.9.0"
ipython = "^7.5.0"
jsonschema = "^2.6.0"
markdown = "^3.0.1"
meltano-flask-security = "^0.1.0"
networkx = "^2.2"
psutil = "^5.6.3"
psycopg2-binary = "^2.8.5"
pyhocon = "^0.3.51"
pyhumps = "1.2.2"
pypika = "^0.25.1"
python-dotenv = "^0.14.0"
python-gitlab = "^1.8.0"
pyyaml = "^5.3.1"
requests = "^2.23.0"
simplejson = "^3.16.0"
smtpapi = "^0.4.1"
snowflake-sqlalchemy = "^1.2.3"
sqlalchemy = "^1.3.19"
sqlparse = "^0.3.0"
watchdog = "^0.9.0"
werkzeug = "^0.16.1"

[tool.poetry.extras]
infra = ["ansible"]

[tool.poetry.dev-dependencies]
asynctest = "^0.12.2"
black = "^20.8b1"
bumpversion = "^0.6.0"
changelog-cli = "^0.6.2"
coverage = "^4.5.4"
flakehell = "^0.7.0"
freezegun = "^0.3.12"
pre-commit = "^2.9.2"
pytest = "^4.3.1"
pytest-asyncio = "^0.10.0"
pytest-cov = "^2.6.1"
requests-mock = "^1.6.0"
wemake-python-styleguide = "^0.14.1"
mypy = "^0.790"
flake8-pytest = "^1.3"

[tool.poetry.scripts]
meltano = "meltano.cli:main"

[tool.isort]
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
line_length = 88
src_paths = ["src/", "tests/"]
skip_glob = ["*.md", "*.vue", "*.js"]
known_third_party = [
  "pytest",
  "aiohttp","alembic",
  "asserts",
  "async_generator",
  "asynctest",
  "atomicwrites",
  "authlib",
  "blinker",
  "click",
  "click_default_group",
  "dotenv",
  "fasteners",
  "flask",
  "flask_cors",
  "flask_executor",
  "flask_login",
  "flask_mail",
  "flask_principal",
  "flask_restful",
  "flask_security",
  "flask_sqlalchemy",
  "flatten_dict",
  "freezegun",
  "gitlab",
  "gunicorn",
  "humps",
  "jinja2",
  "jsonschema",
  "markdown",
  "meltano",
  "networkx",
  "psutil",
  "psycopg2",
  "pyhocon",
  "pypika",
  "pytest",
  "requests",
  "requests_mock",
  "smtpapi",
  "sqlalchemy",
  "sqlparse",
  "support",
  "watchdog",
  "werkzeug",
  "wtforms",
  "yaml"
]

[tool.flakehell]
baseline = ".flakehell_baseline"
exclude = [".venv", "venv", "*.md", "src/webapp/node_modules/"]
inline-quotes = "double"
max_line_length = 88
show_source = true
extended_default_ignore = []
max_imports = 16

[tool.flakehell.plugins]
flake8-bandit = [
  "+*",
  "-S404", # Allow subprocess module to be used
]
flake8-broken-line = ["+*"]
flake8-bugbear = ["+*"]
flake8-comprehensions = ["+*"]
flake8-debugger = ["+*"]
flake8-docstrings = ["+*"]
flake8-eradicate = ["+*"]
flake8-isort = ["+*"]
flake8-rst-docstrings = ["+*"]
flake8-string-format = ["+*"]
mccabe = ["+*"]
pep8-naming = ["+*"]
pycodestyle = [
  "+*",
  "-W503",  # Allow for line breaks where Black decides are valid
  "-E501",  # Allow for long lines since we delegate to Black for enforcement
]
pyflakes = ["+*"]
wemake-python-styleguide = [
  "+*",
  "-WPS110",  # Allow blacklisted variable names that can be clear enough in method context
  "-WPS115",  # Allow upper-case constants in Enum subclasses
  "-WPS300",  # Allow local folder imports (import .module)
  "-WPS305",  # Allow f-strings
  "-WPS306",  # Ignore missing base class, required by pyupgrade: https://github.com/asottile/pyupgrade#rewrites-class-declaration
  "-WPS332",  # Allow assignment expressions (walrus operator :=)
  "-WPS348",  # Allow `.` at beginning of line to accommodate Black formatting of multiline chained function calls
  "-WPS420",  # Allow `pass` keywords in `except` bodies to prevent falling through to another `except`
  "-WPS600",  # Allow subclassing a builtin, such as 'str' (used for serializable Enums)
  "-WPS602",  # Allow using @staticmethod
  "-WPS212",  # Ignore 'too many return statements' - noqa parse inconsistent between py38 vs prior
]

[tool.flakehell.exceptions."tests/"]
flake8-bandit = ["-S101"]  # Don't warn on use of asserts in tests
flake8-docstrings = ["-D100", "-D101", "-D102", "-D103"] # Don't require docstrings in tests
flake8-pytest = ["+*"]
wemake-python-styleguide = [
  "-WPS204",  # Don't warn on overused expressions in test methods
  "-WPS211",  # Don't warn on too many arguments in test methods
  "-WPS218",  # Don't warn on too many `assert` statements in test methods
  "-WPS214",  # Don't warn on too many methods in test modules
  "-WPS226",  # Don't warn on too many string constants in test methods
  "-WPS442",  # Allow outer scope name shadowing for fixtures
  "-WPS430",  # Allow nested functions in test methods
  "-WPS437",  # Allow protected attribute usage in test methods
]

[tool.flakehell.exceptions."scripts/"]
wemake-python-styleguide = ["-WPS421"]  # Allow for print function calls

[tool.flakehell.exceptions."src/meltano/cli/"]
wemake-python-styleguide = [
  "-WPS210",  # Allow many local variables, since these aid in string building
  "-WPS211",  # Allow many arguments, since these often represent CLI arguments
  "-WPS213",  # Allow many expressions, since string building requires them
  "-WPS216",  # Allow many decorators, since `click` uses them to define the CLI
  "-WPS202",  # Allow many module members
]

[tool.flakehell.exceptions."src/meltano/migrations/versions/"]
flake8-docstrings = ["-D103"] # Don't require function docstrings in migrations
wemake-python-styleguide = ["-WPS118"] # Allow long filenames

[tool.flakehell.exceptions."src/meltano/core/job/job.py"]
wemake-python-styleguide = ["-WPS601"] # Class attributes can be used as instance attributes in sqlalchemy.declarative model

[tool.flakehell.exceptions."**/__init__.py"]
pyflakes = ["-F401"]  # Allow for using __init__.py to promote imports to the module namespace

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
