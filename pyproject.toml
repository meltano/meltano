[tool.poetry]
name = "meltano"
version = "3.5.2"
description = "Meltano is your CLI for ELT+: Open Source, Flexible, and Scalable. Move, transform, and test your data with confidence using a streamlined data engineering workflow youâ€™ll love."
authors = ["Meltano <hello@meltano.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/meltano/meltano"
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
packages = [
  { include = "meltano", from = "src", format = "wheel" },
  { include = "src", format = "sdist" },
  { include = "tests", format = "sdist"},
]
keywords = [
  "Meltano",
  "ELT",
  "Data integration",
  "singer-io",
  "dbt",
]
documentation = "https://docs.meltano.com"
homepage = "https://meltano.com"

[tool.poetry.urls]
"Changelog" = "https://github.com/meltano/meltano/blob/main/CHANGELOG.md"
"Issue Tracker" = "https://github.com/meltano/meltano/issues"
"Slack" = "https://meltano.com/slack"
"Twitter" = "https://twitter.com/meltanodata/"
"Youtube" = "https://www.youtube.com/meltano"

[tool.poetry.dependencies]
aiodocker = "^0.22.2"
alembic = "^1.13.2"
atomicwrites = "^1.2.1"
azure-common = {version = "^1.1.28", optional = true}
azure-core = {version = "^1.31.0", optional = true}
azure-identity = {version = "^1.17.1", optional = true}
azure-storage-blob = {version = "^12.22.0", optional = true}
boto3 = {version = "^1.35.19", optional = true}
check-jsonschema = "^0.29.2"
click = "^8.1"
click-default-group = "^1.2.4"
click-didyoumean = "^0.3.1"
croniter = "^3.0.3"
fasteners = "^0.19"
flatten-dict = "^0"
google-cloud-storage = {version = ">=1.31.0", optional = true}
jinja2 = "^3.1.4"
jsonschema = "^4.23"
packaging = "^24.1"
psutil = "^6.0.0"
psycopg = {version = "^3.2.2", extras = ["binary"], optional = true}
psycopg2-binary = {version="^2.9.9", optional=true}
pymssql = {version = "^2.3.1", optional = true}
python = ">=3.8,<3.13"
python-dotenv = "^1.0.1"
pyyaml = "^6.0.2"
requests = "^2.32.3"
rich = "^13.8.1"
"ruamel.yaml" = "^0.18.6"
setuptools = {version = "^75.1.0", python = ">=3.12"}
smart-open = "^7.0.4"
snowplow-tracker = "^1.0.3"
sqlalchemy = "^2.0.34"
structlog = "^24.4.0"
typing-extensions = "^4.12.2"
tzlocal = "^5.2"
# Compatibility issues with boto: https://github.com/boto/botocore/pull/3034
urllib3 = "<2"
uv = { version = ">=0.1.24,<0.5", optional = true }
virtualenv = "^20.26.4"

[tool.poetry.extras]
azure = ["azure-storage-blob", "azure-common", "azure-core", "azure-identity"]
gcs = ["google-cloud-storage"]
mssql = ["pymssql"]
postgres = ["psycopg"]
psycopg2 = ["psycopg2-binary"]
s3 = ["boto3"]
uv = ["uv"]

[tool.poetry.group.dev.dependencies]
backoff = "^2.1.2"
boto3-stubs = {extras = ["essential"], version = "1.35.19"}
colorama = "^0.4.4"
coverage = {extras = ["toml"], version = ">=7.3.2,!=7.3.3"}
mock = "^5.0.2"
moto = "^5.0.14"
mypy = "^1.11.2"
pre-commit = "^3.5.0"
pytest = "^8.3.3"
pytest-asyncio = "^0.24.0"
pytest-cov = "^5.0.0"
pytest-docker = "^3.1"
pytest-order = "^1.3"
pytest-randomly = "^3.12"
pytest-structlog = "^1.1"
pytest-xdist = "^3.6"
requests-mock = "^1.12.1"
setproctitle = "^1.3" # Used by pytest-xdist to aid with handling resource intensive processes.
time-machine = "^2.15.0"
types-croniter = "^3.0.0"
types-jsonschema = "^4.23.0.20240813"
types-psutil = "^6.0.0.20240901"
types-pyyaml = "^6.0.12.20240808"
types-requests = "^2.31.0"

[tool.poetry.scripts]
meltano = "meltano.cli:main"

[tool.pytest.ini_options]
addopts = "--cov=meltano --cov=tests --doctest-modules --durations=10 --order-scope=module -ra -n auto --dist=loadfile"
asyncio_mode = "auto"
log_cli = 1
log_cli_format = "%(message)s"
log_cli_level = "CRITICAL"
log_file = "pytest.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_level = "DEBUG"
markers = [
  "backend(type): backend specific test",
  "meta: meta test",
  "concurrent: test requires true concurrency",
  "slow: slow test",
]
testpaths = [
  "tests/",
]

[tool.coverage.run]
branch = true
concurrency = [
  "multiprocessing",
  "thread",
]
parallel = true
relative_files = true  # This allows coverage to be measured in Windows
source = [
  "meltano",
  "tests",
]
omit = [
  "**/meltano/migrations/env.py",
  "**/meltano/cli/interactive/*",
]

[tool.coverage.paths]
source = [
  "src/meltano/",
  "**/site-packages/meltano/",
  "**/site-packages/meltano*/meltano/",
]

[tool.coverage.report]
exclude_also = [
  '''if (t\.)?TYPE_CHECKING:''',
  "\\.\\.\\.",
]
precision = 2
show_missing = true
skip_covered = true

[tool.commitizen]
name = "cz_version_bump"
prerelease_offset = 1
tag_format = "v$major.$minor.$patch$prerelease"
changelog_merge_prerelease = true
version = "3.5.2"
version_files = [
  "pyproject.toml:^version =",
  "src/meltano/__init__.py:^__version__ =",
  'docs/package.json:^  "version":',
  ".github/ISSUE_TEMPLATE/bug.yml:^      placeholder:",
]

[tool.mypy]
incremental = false # Disabled until https://github.com/python/mypy/issues/12664 is resolved
files = [
  "src/meltano/",
]
exclude = [
  "src/meltano/migrations/",
]
warn_unused_configs = true
warn_unused_ignores = true

# The following whitelist is used to allow for incremental adoption
# of MyPy. Modules should be removed from this whitelist as and when
# their respective type errors have been addressed. No new modules
# should be added to this whitelist.
[[tool.mypy.overrides]]
ignore_errors = true
module = [
  "meltano.cli.add",
  "meltano.cli.install",
  "meltano.cli.interactive.*",
  "meltano.cli.invoke",
  "meltano.cli.state",
  # Way too many modules at the root of meltano.core to tackle them all at once  # so listing them individually here.
  "meltano.core.db",
  "meltano.core.elt_context",
  "meltano.core.migration_service",
  "meltano.core.models",
  "meltano.core.plugin_invoker",
  "meltano.core.project_add_service",
  "meltano.core.project_files",
  "meltano.core.project_plugins_service",
  "meltano.core.project_settings_service",
  "meltano.core.settings_store",
  "meltano.core.sqlalchemy",
  "meltano.core.task_sets_service",
  "meltano.core.transform_add_service",
  # Meltano Core submodules
  "meltano.core.behavior.*",
  "meltano.core.block.*",
  "meltano.core.job.*",
  "meltano.core.plugin.airflow",
  "meltano.core.plugin.base",
  "meltano.core.plugin.command",
  "meltano.core.plugin.dbt.*",
  "meltano.core.plugin.factory",
  "meltano.core.plugin.file",
  "meltano.core.plugin.meltano_file",
  "meltano.core.plugin.project_plugin",
  "meltano.core.plugin.settings_service",
  "meltano.core.plugin.singer.catalog",
  "meltano.core.plugin.singer.target",
  "meltano.core.runner.*",
  "meltano.core.tracking.*",
  "meltano.core.utils.*",
]

[[tool.mypy.overrides]]
ignore_missing_imports = true
module = [
  "click_default_group.*",  # https://github.com/click-contrib/click-default-group/issues/26
  "click_didyoumean.*",     # Unreleased, https://github.com/click-contrib/click-didyoumean/commit/048b275077382e5a80bdf05b02830013eb37ddd1
  "flatten_dict.*",         # Stale package, https://github.com/ianlini/flatten-dict
  "smart_open.*",           # https://github.com/piskvorky/smart_open/issues/772
]

[build-system]
requires = ["poetry-core==1.7.0"]
build-backend = "poetry.core.masonry.api"

[tool.ruff]
line-length = 88
target-version = "py38"

[tool.ruff.lint]
ignore = [
  "ANN101", # Missing type annotation for `self` in method
  "ANN102", # Missing type annotation for `cls` in class method
  "N818",   # Allow Exceptions to have suffix 'Exception' rather than 'Error'
  "PT004",  # Add leading underscore to fixtures that do not return anything
  "UP026",  # Replace `mock` import with `unittest.mock` - remove once Python 3.7 support is dropped
  "S310",   # Allow `urllib.open`
  "S603",   # Allow `subprocess.run(..., shell=False)`
  "COM812", # Handled by the Ruff formatter
  "ISC001", # Handled by the Ruff formatter
]
select = [
  "A",    # flake8-builtins
  "ANN",  # flake8-annotations
  "ARG",  # flake8-unused-arguments
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "COM",  # flake8-commas
  "D",    # pydocstyle/flake8-docstrings
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle (error)
  "EM",   # flake8-errmsg
  "ERA",  # flake8-eradicate
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INP",  # flake8-no-pep420
  "ISC",  # flake8-implicit-str-concat
  "N",    # pep8-naming
  "PERF", # Perflint
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "T10",  # flake8-debugger
  "T20",  # flake8-print
  "TCH",  # flake8-type-checking
  "TID",  # flake8-tidy-imports
  "UP",   # pyupgrade
  "W",    # pycodestyle (warning)
  "YTT",  # flake8-2020
]
unfixable = [
  "ERA001", # Don't remove commented-out code
]

[tool.ruff.lint.per-file-ignores]
"src/meltano/**/__init__.py" = [
  "F401", # Permit unused imports in `__init__.py` files
]
"tests/**" = [
  "ANN",
  "D1",
  "S101", # Allow 'assert' in tests
  "INP",  # Don't require __init__.py files in tests directories
]
"src/meltano/migrations/versions/*" = [
    "D103",
    "D415",
    "INP001",
    "TCH003",
    "TID251",
    "UP007",
]

[tool.ruff.lint.flake8-annotations]
allow-star-arg-any = true
mypy-init-return = true
suppress-dummy-args = true

[tool.ruff.lint.flake8-import-conventions]
banned-from = [
  "typing",
]

[tool.ruff.lint.flake8-import-conventions.extend-aliases]
typing = "t"

[tool.ruff.lint.flake8-pytest-style]
parametrize-values-type = "tuple"

[tool.ruff.lint.isort]
known-first-party = ["asserts", "fixtures", "meltano"]
required-imports = ["from __future__ import annotations"]

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint.flake8-tidy-imports.banned-api]
"logging.getLogger".msg = "Use `structlog.stdlib.get_logger` instead"
"logging.critical".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.fatal".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.error".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.exception".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.warning".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.warn".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.info".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.debug".msg = "Create a logger with `structlog.stdlib.get_logger`"
"logging.log".msg = "Create a logger with `structlog.stdlib.get_logger`"
"meltano.cli.cli.command".msg = "Use `click.command` and `meltano.cli.cli.add_command` instead"
"meltano.cli.cli.group".msg = "Use `click.group` and `meltano.cli.cli.add_command` instead"
