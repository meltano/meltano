# This top-level `pyproject.toml` file is not for any one Python package. It
# contains configs for tools which apply to the entire repository.

[tool.commitizen]
name = "cz_version_bump"
tag_format = "v$major.$minor.$patch$prerelease"
version = "2.14.0"
version_files = [
  "src/meltano/pyproject.toml:^version =",
  "src/meltano/meltano/__init__.py:^__version__ =",
  'src/meltano/webapp/package.json:^  "version":',
  'docs/package.json:^  "version":',
]

[tool.isort]
add_imports = [
  "from __future__ import annotations",
]
ensure_newline_before_comments = true
force_grid_wrap = 0
include_trailing_comma = true
line_length = 88
multi_line_output = 3
skip_glob = [
  "*.md",
  "*.vue",
  "*.js",
  "src/meltano/meltano/migrations/versions/*",
]
src_paths = [
  "src/meltano/meltano/",
  "src/meltano/tests/",
]
use_parentheses = true

[tool.flakeheaven]
accept_encodings = "utf-8"
# baseline = "flakeheaven-baseline"
docstring_style = "google"
doctests = true
enable_extensions = "G"
format = "colored"
inline_quotes = "double"
max_complexity = 6
max_imports = 20
max_line_length = 88
show_source = true
statistics = true

[tool.flakeheaven.plugins]
"flake8-*" = [
  "+*",
]
"flake8-commas" = [
  "-*",
]
"flake8-bandit" = [
  "+*",
  "-S404", # Allow subprocess module to be used
  "-S310", # Allow `urllib.open`
  "-S603", # Allow `subprocess.run(..., shell=False)`
]
"flake8-string-format" = [
  "-P101", # Allow format strings with unindex parameters (because the pyupgrade pre-commit hook enforces their usage)
]
"flake8-rst-docstrings" = [
  "-*",
]
mccabe = [
  "+*",
]
"pep8-naming" = [
  "+*",
  "-N818", # Allow Exceptions to have suffix 'Exception' rather than 'Error'
]
pycodestyle = [
  "+*",
  "-E203", # Let Black put whitespace before :
  "-W503", # Allow for line breaks where Black decides are valid
]
pyflakes = [
  "+*",
]
"wemake-python-styleguide" = [
  "+*",
  "-WPS100",
  "-WPS110", # Allow blacklisted variable names that can be clear enough in method context
  "-WPS111",
  "-WPS112",
  "-WPS115", # Allow upper-case constants in Enum subclasses
  "-WPS201",
  "-WPS202", # Allow many module members
  "-WPS211", # Allow "too many"
  "-WPS212", # Ignore 'too many return statements' - noqa parse inconsistent between py38 vs prior
  "-WPS220",
  "-WPS221",
  "-WPS226",
  "-WPS229",
  "-WPS231",
  "-WPS232",
  "-WPS237",
  "-WPS300", # Allow local folder imports (import .module)
  "-WPS305", # Allow f-strings
  "-WPS306", # Ignore missing base class, required by pyupgrade: https://github.com/asottile/pyupgrade#rewrites-class-declaration
  "-WPS316",
  "-WPS317", # Allow "incorrect multi-line parameters", since Black forces them to be "incorrect"
  "-WPS324", # Allow inconsistent returns - permitted because of too many false positives
  "-WPS326", # Allow syntax-level (process when first parsed, rather than at every run) string concatenation
  "-WPS332", # Allow assignment expressions (walrus operator :=)
  "-WPS337",
  "-WPS338", # Allow 'incorrect' order of methods in a class
  "-WPS348", # Allow `.` at beginning of line to accommodate Black formatting of multiline chained function calls
  "-WPS352",
  "-WPS354", # Allow consecutive yield expressions
  "-WPS402", # Allow "overuse" of noqa comments.
  "-WPS404",
  "-WPS407",
  "-WPS410", # Allow metadata variable (__all__)
  "-WPS412",
  "-WPS420", # Allow `pass` keywords in `except` bodies to prevent falling through to another `except`
  "-WPS429",
  "-WPS430",
  "-WPS431", # Allow nested classes
  "-WPS433",
  "-WPS440", # Allow block variable overlap, e.g. multiple for-loops that use the same name for their loop variables
  "-WPS441", # Allow control variables to be used after their block, because this rule has too many false-positives
  "-WPS454",
  "-WPS458", # Import name collisions - disabled because it raises many false positives
  "-WPS461", # Allow all inline ignores
  "-WPS501",
  "-WPS507",
  "-WPS600", # Allow subclassing a builtin, such as 'str' (used for serializable Enums)
  "-WPS602", # Allow using @staticmethod
  "-WPS615", # Allow "unpythonic" getters and setters
]

[tool.flakeheaven.exceptions."src/meltano/tests/*"]
"flake8-bandit" = [
  "-S101", # Don't warn on use of asserts in tests
]
# Don't require docstrings in tests
"flake8-darglint" = [
  "-DAR101",
  "-DAR201",
  "-DAR301",
]
"flake8-docstrings" = [
  "-D100",
  "-D101",
  "-D102",
  "-D103",
  "-D104",
  "-D105",
  "-D107",
]
"flake8-string-format" = [
  "-P103", # String does contain unindexed parameters
]
"wemake-python-styleguide" = [
  "-WPS114", # Allow underscored number name pattern (e.g. tap_covid_19)
  "-WPS204", # Don't warn on overused expressions in test methods
  "-WPS211", # Don't warn on too many arguments in test methods
  "-WPS210", # Don't warn on too many local variables in test methods
  "-WPS218", # Don't warn on too many `assert` statements in test methods
  "-WPS213", # Found too many expressions
  "-WPS214", # Don't warn on too many methods in test modules
  "-WPS217", # Don't warn about there being too many await expressions
  "-WPS226", # Don't warn on too many string constants in test methods
  "-WPS316", # Context manager with too many assignments
  "-WPS442", # Allow outer scope name shadowing for fixtures
  "-WPS430", # Allow nested functions in test methods
  "-WPS432", # Allow magic numbers
  "-WPS436", # Allow protected module import (_pytest.monkeypatch)
  "-WPS437", # Allow protected attribute usage in test methods
  "-WPS201", # Found module with too many imports
  "-WPS425", # Found boolean non-keyword argument
  "-WPS118", # Found too long name
  "-WPS342", # Avoid false positive for implicit raw strings
]

[tool.flakeheaven.exceptions."src/meltano/!tests/*"]
"flake8-debugger" = [
  "-T100",
]

[tool.flakeheaven.exceptions."src/meltano/scripts/*"]
"wemake-python-styleguide" = [
  "-WPS421", # Allow for print function calls
]

[tool.flakeheaven.exceptions."src/meltano/meltano/cli/*"]
"flake8-docstrings" = [
  "-D301", # Allow backslashes in dosctrings
]
"flake8-darglint" = [
  "-*", # Don't require docstrings in click commands
]
"wemake-python-styleguide" = [
  "-WPS210", # Allow many local variables, since these aid in string building
  "-WPS211", # Allow many arguments, since these often represent CLI arguments
  "-WPS213", # Allow many expressions, since string building requires them
  "-WPS216", # Allow many decorators, since `click` uses them to define the CLI
  "-WPS202", # Allow many module members
  "-WPS204", # Allow 'overuse' of expressions (e.g. ctx.obj["-settings"])
]

[tool.flakeheaven.exceptions."src/meltano/meltano/migrations/versions/*"]
"flake8-docstrings" = [
  "-D101", # Don't class docstrings in migrations
  "-D103", # Don't require function docstrings in migrations
  "-D400", # Don't require periods in the first lines of dosctrings
]
"pep8-naming" = [
  "-N806", # Allow uppercase variable names
]
"wemake-python-styleguide" = [
  "-WPS102", # Allow module names starting with numbers
  "-WPS118", # Allow long filenames
  "-WPS204", # Allow expression "-overuse"
  "-WPS226", # Allow string constant "-overuse"
  "-WPS432", # Allow "-magic" numbers
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/job/job.py"]
"wemake-python-styleguide" = [
  "-WPS601", # Class attributes can be used as instance attributes in sqlalchemy.declarative model
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/project_files.py"]
"wemake-python-styleguide" = [
  "-WPS226", # Dict manipulation requires lots of string constant references
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/project_init_service.py"]
"wemake-python-styleguide" = [
  "-WPS226", # Found string constant over-use: blue > 3
  "-WPS229", # Found too long ``try`` body length: 3 > 1
  "-WPS213", # Found too many expressions: 27 > 9
]

[tool.flakeheaven.exceptions."src/meltano/meltano/**/__init__.py"]
pyflakes = [
  "-F401", # Allow for using __init__.py to promote imports to the module namespace
]

[tool.flakeheaven.exceptions."src/meltano/tests/**/__init__.py"]
pyflakes = [
  "-F401", # Allow for using __init__.py to promote imports to the module namespace
]
# Don't require docstrings in tests
"flake8-darglint" = [
  "-DAR101",
  "-DAR201",
  "-DAR301",
]
"flake8-docstrings" = [
  "-D100",
  "-D101",
  "-D102",
  "-D103",
  "-D104",
]

[tool.flakeheaven.exceptions."src/meltano/meltano/__init__.py"]
"wemake-python-styleguide" = [
  "-WPS412", # Found `__init__.py` module with logic
  "-WPS410", # Found wrong metadata variable
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/block/extract_load.py"]
"wemake-python-styleguide" = [
  "-WPS201", # Found module with too many imports: 21 > 20
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/logging/utils.py"]
"wemake-python-styleguide" = [
  "-WPS100", # Found wrong module name
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/cli_messages.py"]
# Special exceptions for cli magic
"wemake-python-styleguide" = [
  "-WPS114",
  "-WPS360",
]
pycodestyle = [
  "-W291",
  "-W293",
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/settings_store.py"]
"wemake-python-styleguide" = [
  "-WPS204", # Found overused expression: allow settings store implementations to all return vars with the same names
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/utils/__init__.py"]
"flake8-docstrings" = [
  "-D103", # Many of these utility functions are descriptively named and self-documenting
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/state_store/*"]
"wemake-python-styleguide" = [
  "-WPS428", # Ignore ... in ABC
]

[tool.flakeheaven.exceptions."src/meltano/meltano/core/state_store/__init__.py"]
"wemake-python-styleguide" = [
  "-WPS320", # Ignore multi-line function annotations
]
