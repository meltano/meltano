name: Build and publish Meltano

on:
  push:
    paths:
    - .github/actions/docker-build-scan-push/action.yml
    - .github/workflows/build.yml
    - docker/meltano/Dockerfile
    - src/**
    - scripts/**
    - pyproject.toml
  workflow_dispatch:
  schedule:
  # Weekly on Sunday at 04:45 UTC
  - cron: '45 4 * * 0'
  release:
    types: [published]

permissions:
  contents: write  # Needed to upload artifacts to the release
  id-token: write  # Needed for OIDC PyPI publishing

jobs:
  build:
    name: Build artifacts
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.baipp.outputs.package_version }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Setup uv
      uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 # v5.4.1
      with:
        version: ">=0.6"

    - name: Set up Python
      uses: actions/setup-python@8d9ed9ac5c53483de85588cdf95a591a75ab9f55 # v5.5.0
      with:
        python-version: 3.x

    - name: Check version
      if: github.event_name == 'release' && github.event.action == 'published'
      run: |
        version=$(uvx --from toml-cli toml get --toml-path=pyproject.toml project.version)
        tag=$(echo "${{ github.ref }}" | awk '{split($0,p,"/"); print p[3]}')
        if [ "v$version" != $tag ]; then echo "Release tag ('$tag') and package version ('v$version') do not match!"; exit 1; fi;

    - name: uv install
      # Required to run `alembic_freeze.py`
      run: |
        uv sync

    - name: Freeze DB
      run: |
        uv run scripts/alembic_freeze.py

    - name: Release Marker
      if: github.event_name == 'release' && github.event.action == 'published'
      # The release marker differentiates installations 'in the wild' versus internal dev builds and tests
      run: touch src/meltano/core/tracking/.release_marker

    - name: Build distribution
      uses: hynek/build-and-inspect-python-package@b5076c307dc91924a82ad150cdd1533b444d3310 # v2.12.0
      id: baipp

  build_docker:
    name: Build Meltano Docker image
    runs-on: ubuntu-latest
    needs: build
    permissions:
      actions: read
      contents: read
      packages: write
      security-events: write
    env:
      DEFAULT_PYTHON: "3.9"  # will be used in 'latest' images

    strategy:
      fail-fast: false
      matrix:
        python-version:
        - "3.9"
        - "3.10"
        - "3.11"
        - "3.12"
        - "3.13"

    steps:
    - name: Set the workflow inputs
      id: set-inputs
      # This step makes it so that the same workflow inputs can be accessed
      # regardless of what event triggered it.
      run: |
        echo "registry=${{ github.event_name == 'release' && github.event.action == 'published' && 'docker.io' || 'ghcr.io' }}" >> $GITHUB_OUTPUT
    - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
    - name: Setup uv
      uses: astral-sh/setup-uv@0c5e2b8115b80b4c7c5ddf6ffdd634974642d182 # v5.4.1
      with:
        version: ">=0.6"

    - name: Generate tags
      id: generate-tags
      run: >
        python scripts/generate_docker_tags.py
        --git-sha ${{ github.sha }}
        -v ${{ needs.build.outputs.version }}
        -p ${{ matrix.python-version }}
        -d ${{ env.DEFAULT_PYTHON }}
        -r ${{ steps.set-inputs.outputs.registry }}
        > tags

    - name: Assemble image tags
      id: assemble-tags
      run: |
        echo "If this is not a dry run, the image will be published with the following tags:"
        cat tags

        echo 'IMAGE_TAGS<<EOF' >> $GITHUB_ENV
        echo "$(cat tags)" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Set registry username and password
      id: user-and-pass
      run: |
        if [[ "${{ steps.set-inputs.outputs.registry }}" == "ghcr.io" ]]; then
          echo "username=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ steps.set-inputs.outputs.registry }}" == "docker.io" ]]; then
          echo "username=meltano" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_OUTPUT
        fi

    - name: Build, scan, then conditionally push the Docker image for a given Python version
      uses: ./.github/actions/docker-build-scan-push
      with:
        # Push to the container registry if
        # - The trigger is a push to the main branch
        # - The trigger is a workflow dispatch
        # - The trigger is a release and the action is 'published'
        push: ${{ ( github.event_name == 'push' && github.ref == 'refs/heads/main' ) || ( github.event_name == 'workflow_dispatch' ) || ( github.event_name == 'release' && github.event.action == 'published' )}}
        token: ${{ secrets.GITHUB_TOKEN }}
        tags: ${{ env.IMAGE_TAGS }}
        registry: ${{ steps.set-inputs.outputs.registry }}
        username: ${{ steps.user-and-pass.outputs.username }}
        password: ${{ steps.user-and-pass.outputs.password }}
        python-version: ${{ matrix.python-version }}

  pypi_release:
    name: Publish to PyPI
    if: github.event_name == 'release' && github.event.action == 'published'
    needs: [build, build_docker]
    runs-on: ubuntu-latest
    environment:
      name: publishing
      url: https://pypi.org/project/meltano/${{ needs.build.outputs.version }}

    steps:
    - name: Check out the repository
      uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

    - name: Download artifacts
      uses: actions/download-artifact@95815c38cf2ff2164869cbab79da8d1f422bc89e # v4.2.1
      with:
        name: Packages
        path: dist

    - name: Upload wheel to release
      uses: svenstaro/upload-release-action@04733e069f2d7f7f0b4aebc4fbdbce8613b03ccd # 2.9.0
      with:
        repo_token: ${{ secrets.GITHUB_TOKEN }}
        file: dist/*.whl
        tag: ${{ github.ref }}
        overwrite: true
        file_glob: true

    - name: Publish
      uses: pypa/gh-action-pypi-publish@76f52bc884231f62b9a034ebfe128415bbaabdfc # v1.12.4
