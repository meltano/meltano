name: Tests

on:
  pull_request: {}
  push:
    branches: [main]
  workflow_dispatch:
    inputs: {}

concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true

jobs:
  tests:
    strategy:
      matrix:
        include:
        - { python-version: "3.7",  os: "ubuntu-latest",  backend-db: sqlite }
        - { python-version: "3.8",  os: "ubuntu-latest",  backend-db: sqlite }
        - { python-version: "3.9",  os: "ubuntu-latest",  backend-db: sqlite }
        - { python-version: "3.10", os: "ubuntu-latest",  backend-db: sqlite }
        - { python-version: "3.7",  os: "ubuntu-latest",  backend-db: postgresql }
        - { python-version: "3.8",  os: "ubuntu-latest",  backend-db: postgresql }
        - { python-version: "3.9",  os: "ubuntu-latest",  backend-db: postgresql }
        - { python-version: "3.10", os: "ubuntu-latest",  backend-db: postgresql }
        - { python-version: "3.7",  os: "windows-latest", backend-db: sqlite } # We'd like to run Windows tests for all backend-dbs see https://github.com/meltano/meltano/issues/6281
        - { python-version: "3.8",  os: "windows-latest", backend-db: sqlite }
        - { python-version: "3.9",  os: "windows-latest", backend-db: sqlite }
        - { python-version: "3.10", os: "windows-latest", backend-db: sqlite }
      fail-fast: false

    name: "Pytest on py${{ matrix.python-version }} (OS: ${{ matrix.os }}, DB: ${{ matrix.backend-db }})"
    runs-on: ${{ matrix.os }}
    env:
      PYTEST_MARKERS: not concurrent

    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Install Poetry
      env:
        PIP_CONSTRAINT: .github/workflows/resources/constraints.txt
      run: |
        pipx install poetry
        poetry --version

    - name: Setup Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4.1.0
      with:
        python-version: ${{ matrix.python-version }}
        architecture: x64
        cache: 'poetry'

    - name: Upgrade pip
      env:
        PIP_CONSTRAINT: .github/workflows/resources/constraints.txt
      run: |
        pip install pip
        pip --version

    - name: Install Dependencies
      run: |
        poetry env use "${{ matrix.python-version }}"
        poetry install

    - name: Start Postgres Container
      if: always() && (matrix.backend-db == 'postgresql')
      run: >
        docker run -d
        -p "5432:5432"
        -e "POSTGRES_PASSWORD=postgres"
        --name postgres
        --health-cmd "pg_isready -d postgres -U postgres"
        --health-interval 10s
        --health-timeout 5s
        --health-retries 5
        postgres:11

    - name: Check running containers
      run: |
        docker ps -a

    - name: Run pytest
      env:
        PYTEST_BACKEND: ${{ matrix.backend-db }}

        # Postgres backend
        POSTGRES_HOST_AUTH_METHOD: trust
        POSTGRES_ADDRESS: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: postgres
        POSTGRES_PASSWORD: postgres
        POSTGRES_DB: pytest_warehouse
      run: |
        poetry run coverage run --parallel -m pytest -m "${{ env.PYTEST_MARKERS }}"

    - name: Upload coverage data
      if: always() && (matrix.python-version == '3.9')
      uses: actions/upload-artifact@v3.1.0
      with:
        name: coverage-data
        path: ".coverage.*"

  coverage:
    runs-on: ubuntu-latest
    needs: tests
    steps:
    - name: Check out the repository
      uses: actions/checkout@v3.0.2

    - name: Install Poetry
      run: |
        pipx install --pip-args=--constraint=.github/workflows/resources/constraints.txt poetry
        poetry --version

    - name: Set up Python
      uses: actions/setup-python@v4.1.0
      with:
        python-version: '3.9'
        cache: 'poetry'

    - name: Upgrade pip
      run: |
        pip install --constraint=.github/workflows/resources/constraints.txt pip
        pip --version

    - name: Download coverage data
      uses: actions/download-artifact@v3.0.0
      with:
        name: coverage-data

    - name: Install Dependencies
      run: |
        poetry env use "3.9"
        poetry install

    - name: Combine coverage data and display human readable report
      run: |
        poetry run coverage combine
        poetry run coverage report --show-missing --ignore-errors

    - name: Create coverage report
      run: |
        poetry run coverage xml --ignore-errors

    - name: Upload coverage report
      uses: codecov/codecov-action@v3.1.0
