name: Docker Publish

# This workflow will build and publish all public Docker images to the configured registry.
# Set the input `dry_run` to `false` to skip pushing images to the registry.

on:
  schedule:
  # Weekly on Sunday at 04:45 UTC
  - cron: '45 4 * * 0'
  workflow_dispatch:
    inputs:
      dry_run:
        description: "Dry run (skip push step)"
        type: boolean
        required: true
        default: true
      registry:
        description: "Where to upload the images"
        required: true
        type: choice
        options:
          - ghcr.io
          - docker.io

jobs:
  build_meltano_image:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        include:
        - python-version: "3.7"
          is-default-python: false
        - python-version: "3.8"
          is-default-python: false
        - python-version: "3.9"
          is-default-python: true # will be used in 'latest' images
        - python-version: "3.10"
          is-default-python: false

    steps:
    - name: Set the workflow inputs
      # This step makes it so that the same workflow inputs can be accessed
      # regardless of what event triggered it.
      env:
        DEFAULT_DRY_RUN: "true"
        DEFAULT_REGISTRY: "ghcr.io"
      run: |
        # Boolean values don't actually work so cast to 'true' and 'false'
        # https://github.com/actions/runner/issues/1483
        echo "dry_run=${{ format('{0}', github.event.inputs.dry_run) || env.DEFAULT_DRY_RUN }}" >> $GITHUB_ENV
        echo "registry=${{ github.event.inputs.registry || env.DEFAULT_REGISTRY }}" >> $GITHUB_ENV

    - uses: actions/checkout@v3.2.0

    - name: Get Meltano version
      id: get-meltano-version
      run: |
        pipx install poetry
        poetry version
        poetry version --short
        echo "release-version=$(poetry version --short)" >> $GITHUB_OUTPUT

    - name: Assemble image tags
      id: assemble-tags
      run: |
        MELTANO_VERSION="${{ steps.get-meltano-version.outputs.release-version }}"
        MELTANO_VERSION_ARRAY=(${MELTANO_VERSION//./ })
        MELTANO_VERSION_MAJOR="${MELTANO_VERSION_ARRAY[0]}"
        MELTANO_VERSION_MAJOR_MINOR="${MELTANO_VERSION_ARRAY[0]}.${MELTANO_VERSION_ARRAY[1]}"
        MELTANO_VERSION_MAJOR_MINOR_PATCH="${MELTANO_VERSION_ARRAY[0]}.${MELTANO_VERSION_ARRAY[1]}.${MELTANO_VERSION_ARRAY[2]}"

        # To save space, only publish the `latest` tag for each images to the GitHub registry
        if [[ "${{ env.registry }}" != "ghcr.io" ]]; then
          echo "v${MELTANO_VERSION_MAJOR}-python${{ matrix.python-version }}" >> tags
          echo "v${MELTANO_VERSION_MAJOR_MINOR}-python${{ matrix.python-version }}" >> tags
          echo "v${MELTANO_VERSION_MAJOR_MINOR_PATCH}-python${{ matrix.python-version }}" >> tags
          [[ "${{ matrix.is-default-python }}" == "true" ]] && echo "SHA-${{ github.sha }}" >> tags
          [[ "${{ matrix.is-default-python }}" == "true" ]] && echo "v${MELTANO_VERSION_MAJOR}" >> tags
          [[ "${{ matrix.is-default-python }}" == "true" ]] && echo "v${MELTANO_VERSION_MAJOR_MINOR}" >> tags
          [[ "${{ matrix.is-default-python }}" == "true" ]] && echo "v${MELTANO_VERSION_MAJOR_MINOR_PATCH}" >> tags
        fi
        echo "latest-python${{ matrix.python-version }}" >> tags
        [[ "${{ matrix.is-default-python }}" == "true" ]] && echo "latest" >> tags

        echo "If this is not a dry run, the image will be published with the following tags:"
        cat tags

        echo 'IMAGE_TAGS<<EOF' >> $GITHUB_ENV
        echo "$(cat tags)" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV

    - name: Set registry username and password
      id: user-and-pass
      run: |
        if [[ "${{ env.registry }}" == "ghcr.io" ]]; then
          echo "username=${{ github.actor }}" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_OUTPUT
        fi
        if [[ "${{ env.registry }}" == "docker.io" ]]; then
          echo "username=meltano" >> $GITHUB_OUTPUT
          echo "password=${{ secrets.DOCKERHUB_TOKEN }}" >> $GITHUB_OUTPUT
        fi

    - name: Build, scan, then conditionally push the Docker image for a given Python version
      uses: ./.github/actions/docker-build-scan-push
      with:
        push: ${{ env.dry_run == 'false' }}
        token: ${{ secrets.GITHUB_TOKEN }}
        tags: ${{ env.IMAGE_TAGS }}
        registry: ${{ env.registry }}
        username: ${{ steps.user-and-pass.outputs.username }}
        password: ${{ steps.user-and-pass.outputs.password }}
        python-version: ${{ matrix.python-version }}
        meltano-version: ${{ steps.get-meltano-version.outputs.release-version }}
