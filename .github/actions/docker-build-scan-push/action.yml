name: 'build-scan-push'
description: 'Build a Docker image, scan it, then push it to a container registry'

inputs:
  token:
    description: 'A GitHub API token that can access the code scanning endpoints.'
    required: true
  tags:
    description: 'The Docker tags for the image that will be built'
    required: true
  registry:
    description: "Where to upload the images"
    required: true
  push:
    description: 'Whether to push the built image to the registry'
    required: true
  username:
    description: 'The username to use when pushing the image'
    required: true
  password:
    description: 'The password to use when pushing the image'
    required: true
  python-version:
    description: 'The version of Python that will be installed on the image'
    required: true
  slim:
    description: 'Whether to build the slim variant of the image'
    required: false
    default: 'false'

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@08c6903cd8c0fde910a37f88322edcfb5dd907a8 # v5.0.0
      with:
        persist-credentials: false
    - name: Set up QEMU
      uses: docker/setup-qemu-action@29109295f81e9208d7d86ff1c6c12d2833863392 # v3.6.0

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@e468171a9de216ec08956ac3ada2f0791b6bd435 # v3.11.1

    - name: Prepare the tags
      id: prepare-tags
      shell: bash
      run: |
        echo "tags=$(echo "${INPUTS_TAGS}" | sed "s/^/${INPUTS_REGISTRY}\/meltano\/meltano:/" | tr '\n' ',')" >> $GITHUB_OUTPUT
      env:
        INPUTS_TAGS: ${{ inputs.tags }}
        INPUTS_REGISTRY: ${{ inputs.registry }}

    - name: Download artifacts
      uses: actions/download-artifact@634f93cb2916e3fdff6788551b99b062d0335ce0 # v5.0.0
      with:
        name: Packages
        path: dist

    - name: Set Dockerfile path
      id: dockerfile-path
      shell: bash
      run: |
        if [[ "${{ inputs.slim }}" == "true" ]]; then
          echo "path=docker/meltano/Dockerfile.slim" >> $GITHUB_OUTPUT
        else
          echo "path=docker/meltano/Dockerfile" >> $GITHUB_OUTPUT
        fi

    - name: Build the image for all supported architectures
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: .
        file: ${{ steps.dockerfile-path.outputs.path }}
        build-args: |
          PYTHON_VERSION=${{ inputs.python-version }}
        tags: ${{ steps.prepare-tags.outputs.tags }}
        platforms: linux/amd64,linux/arm64
        # Can't load multi-arch images; use workaround instead:
        # https://github.com/docker/buildx/issues/59#issuecomment-1168619521
        # We build both images first to ensure they can be built, and to
        # store them in the build cache. Then we load one of them, and scan
        # it. Then we optionally push both of them to the registry.
        load: false
        push: false

    - name: Load the amd64 image for scanning
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: .
        file: ${{ steps.dockerfile-path.outputs.path }}
        build-args: |
          PYTHON_VERSION=${{ inputs.python-version }}
        tags: ${{ steps.prepare-tags.outputs.tags }}
        platforms: linux/amd64
        load: true

    - name: Get the ID of the image
      id: get-image-id
      shell: bash
      run: |
        docker images
        echo "id=$(docker images -q --no-trunc ${INPUTS_REGISTRY}/meltano/meltano | head -n 1)" >> $GITHUB_OUTPUT
      env:
        INPUTS_REGISTRY: ${{ inputs.registry }}

    - name: Scan the image with 'anchore/scan-action'
      id: anchore-scan
      uses: anchore/scan-action@1638637db639e0ade3258b51db49a9a137574c3e # v6.5.1
      with:
        image: ${{ steps.get-image-id.outputs.id }}
        # The job will be failed in a later step if necessary so as to provide a link to the results
        fail-build: false
        severity-cutoff: "critical"

    - name: Upload Anchore scan SARIF report
      uses: github/codeql-action/upload-sarif@3c3833e0f8c1c83d449a7478aa59c036a9165498 # v3.29.11
      with:
        sarif_file: ${{ steps.anchore-scan.outputs.sarif }}
        category: python-${{ inputs.python-version }}

    - name: Provide a link to results
      shell: bash
      continue-on-error: true
      run: |
        echo "View scan results at:"
        echo "https://github.com/meltano/meltano/security/code-scanning?query=ref:${GITHUB_REF}+tool:Grype"
        sleep 10 # Give GitHub some time to process the uploaded report
        NUM_ISSUES="$(curl --no-progress-meter -H "Authorization: token ${INPUTS_TOKEN}" \
            "https://api.github.com/repos/meltano/meltano/code-scanning/alerts?tool_name=Grype&state=open&ref=${GITHUB_REF}" \
            | jq length)"
        [ "$NUM_ISSUES" = '0' ] # Error if there are any alerts that are neither fixed nor dismissed
      env:
        INPUTS_TOKEN: ${{ inputs.token }}

    - name: Login to the registry
      uses: docker/login-action@184bdaa0721073962dff0199f1fb9940f07167d1 # v3.5.0
      with:
        registry: ${{ inputs.registry }}
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Push the scanned image to the registry
      if: ${{ inputs.push == 'true' }}
      uses: docker/build-push-action@263435318d21b8e681c14492fe198d362a7d2c83 # v6.18.0
      with:
        context: .
        file: ${{ steps.dockerfile-path.outputs.path }}
        build-args: |
          PYTHON_VERSION=${{ inputs.python-version }}
        tags: ${{ steps.prepare-tags.outputs.tags }}
        platforms: linux/amd64,linux/arm64
        push: true
