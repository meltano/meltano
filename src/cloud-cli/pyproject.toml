[build-system]
requires = ["poetry_core==1.5.0"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "meltano.cloud.cli"
version = "2.17.0"
description = "Meltano Cloud CLI"
license = "MIT"
authors = ["Meltano <hello@meltano.com>"]
readme = "README.md"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Programming Language :: Python :: 3.7",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Typing :: Typed",
]
packages = [
    { include = "meltano" }
]

[tool.poetry.urls]
"Changelog" = "https://github.com/meltano/meltano/blob/main/CHANGELOG.md"
"Issue Tracker" = "https://github.com/meltano/meltano/issues"
"Slack" = "https://meltano.com/slack"
"Twitter" = "https://twitter.com/meltanodata/"
"Youtube" = "https://www.youtube.com/meltano"

[tool.poetry.dependencies]
aiohttp = "^3.8.4"
cached-property = "^1"
click = "^8.1"
croniter = "^1.3.8"
importlib-metadata = {version = "^6.0.0", python = "<3.8"}
pydantic = "^1.10.5"
python = ">=3.7,<3.12"
python-ulid = "^1.1.0"
questionary = "^1.10.0"
requests = "^2.28.0"
structlog = "^22.3.0"
platformdirs = "^3.0.0"
flask = "^2.1"
pyjwt = "^2.6.0"
tabulate = "^0.9.0"
typing-extensions = "^4.5.0"

[tool.poetry.scripts]
meltano-cloud = "meltano.cloud.cli:main"

[tool.poetry.group.dev.dependencies]
aioresponses = "^0.7.4"
freezegun = "^1.2.2"
hypothesis = "^6.70.0"
pytest = "^7.2.2"
pytest-asyncio = "^0.21.0"
pytest-httpserver = "^1.0.6"
pytest-randomly = "^3.12"
pytest-structlog = "^0.6"

[tool.pytest.ini_options]
asyncio_mode = "auto"
filterwarnings = [
  "ignore::DeprecationWarning:pkg_resources",
]

[tool.flakeheaven.exceptions."*tests/*"]
"pycodestyle" = [
  "-E051", # Don't warn on long lines
]
"flake8-bandit" = [
  "-S101", # Don't warn on use of asserts in tests
  "-S501", # Avoid false positive for hardcoded passwords
]
# Don't require docstrings in tests
"flake8-darglint" = [
  "-DAR101",
  "-DAR201",
  "-DAR301",
]
"flake8-docstrings" = [
  "-D100",
  "-D101",
  "-D102",
  "-D103",
  "-D104",
  "-D105",
  "-D107",
]
"flake8-string-format" = [
  "-P103", # String does contain unindexed parameters
]
"wemake-python-styleguide" = [
  "-WPS114", # Allow underscored number name pattern (e.g. tap_covid_19)
  "-WPS204", # Don't warn on overused expressions in test methods
  "-WPS211", # Don't warn on too many arguments in test methods
  "-WPS210", # Don't warn on too many local variables in test methods
  "-WPS218", # Don't warn on too many `assert` statements in test methods
  "-WPS213", # Found too many expressions
  "-WPS214", # Don't warn on too many methods in test modules
  "-WPS217", # Don't warn about there being too many await expressions
  "-WPS226", # Don't warn on too many string constants in test methods
  "-WPS316", # Context manager with too many assignments
  "-WPS442", # Allow outer scope name shadowing for fixtures
  "-WPS430", # Allow nested functions in test methods
  "-WPS432", # Allow magic numbers
  "-WPS436", # Allow protected module import (_pytest.monkeypatch)
  "-WPS437", # Allow protected attribute usage in test methods
  "-WPS201", # Found module with too many imports
  "-WPS425", # Found boolean non-keyword argument
  "-WPS118", # Found too long name
  "-WPS342", # Avoid false positive for implicit raw strings
  "-WPS323", # Avoid false positives for % string formatting in URL params
  "-WPS121", # Allow use of hidden vars
  "-WPS122", # Allow use of hidden vars
  "-WPS450", # Allow import of protected objects
]
