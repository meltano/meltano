from dotenv import dotenv_values

from meltano.core.settings_service import (
    SettingsService,
    SettingMissingError,
    SettingValueStore,
)

UI_CFG_SETTINGS = {
    "ui.server_name": "SERVER_NAME",
    "ui.secret_key": "SECRET_KEY",
    "ui.password_salt": "SECURITY_PASSWORD_SALT",
}


class ProjectSettingsService(SettingsService):
    config_override = {}

    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)

        self.env_override = {**self.project.env, **self.env_override}

        self.config_override = {
            **self.__class__.config_override,
            **self.config_override,
        }

    @property
    def _env_namespace(self):
        return "meltano"

    @property
    def _db_namespace(self):
        return "meltano"

    @property
    def _definitions(self):
        return self.config_service.settings

    @property
    def _meltano_yml_config(self):
        return self.config_service.current_config

    def _update_meltano_yml_config(self):
        self.config_service.update_config()

    def get_with_source(self, name: str, *args, **kwargs):
        value, source = super().get_with_source(name, *args, **kwargs)

        if source is SettingValueStore.DEFAULT:
            # Support legacy `ui.cfg` files generated by `meltano ui setup`
            ui_cfg_value = self.get_from_ui_cfg(name)
            if ui_cfg_value is not None:
                value = ui_cfg_value
                source = SettingValueStore.ENV

        return value, source

    def get_from_ui_cfg(self, name: str):
        try:
            key = UI_CFG_SETTINGS[name]
            config = dotenv_values(self.project.root_dir("ui.cfg"))
            value = config[key]

            # Since `ui.cfg` is technically a Python file, `'None'` means `None`
            if value == "None":
                value = None

            return value
        except KeyError:
            return None
