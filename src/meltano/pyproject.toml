[tool.poetry]
name = "meltano"
version = "2.14.0"
description = "Meltano is your CLI for ELT+: Open Source, Flexible, and Scalable. Move, transform, and test your data with confidence using a streamlined data engineering workflow youâ€™ll love."
authors = ["Meltano <hello@meltano.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/meltano/meltano"
classifiers = [
  "Programming Language :: Python :: 3",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
]
packages = [
  { include = "meltano", from = "src", format = "wheel" },
  { include = "webapp", format = "sdist" },
  { include = "tests", format = "sdist"},
  { include = "scripts/build.py", format = "sdist"},
]
# Explicitly include non-Python files and gitignored files:
include = [
  "LICENSE",
  "meltano/api/static/css/*",
  "meltano/api/static/js/*",
  "meltano/api/templates/embed.html",
  "meltano/api/templates/webapp.html",
  "meltano/core/tracking/.release_marker",
  "meltano/schema/*",
]
keywords = [
  "Meltano",
  "ELT",
  "Data integration",
  "singer-io",
  "dbt",
]
documentation = "https://docs.meltano.com"
homepage = "https://meltano.com"

[tool.poetry.urls]
"Changelog" = "https://github.com/meltano/meltano/blob/main/CHANGELOG.md"
"Issue Tracker" = "https://github.com/meltano/meltano/issues"
"Slack" = "https://meltano.com/slack"
"Twitter" = "https://twitter.com/meltanodata/"
"Youtube" = "https://www.youtube.com/meltano"

[tool.poetry.dependencies]
aiodocker = "^0.21.0"
aiohttp = "^3.4.4"
alembic = "^1.5.0"
atomicwrites = "^1.2.1"
authlib = "^1.0.1"
azure-common = {version = "^1.1.28", optional = true}
azure-core = {version = "^1.26.0", optional = true}
azure-storage-blob = {version = "^12.14.1", optional = true}
backoff = "^2.1.2"
bcrypt = "^3.2.0" # Needs to be installed explicitly so it can be used as a backend for passlib
boto3 = {version = "^1.25.3", optional = true}
cached-property = "^1" # Remove after Python 3.7 support is dropped
click = "^8.1"
click-default-group = "^1.2.1"
croniter = "^1.3.5"
email-validator = "^1.1.2"
fasteners = "^0.17.3"
flask = "^2.1"
flask-cors = "^3.0.7"
flask-executor = "^0.10"
flask-login = "==0.6.1" # https://github.com/meltano/meltano/issues/6548
flask-restful = "^0.3.7"
flask-sqlalchemy = "^2.4.4"
flatten-dict = "^0"
google-cloud-storage = {version = ">=1.31.0", optional = true}
gunicorn = "^20.1.0"
importlib-resources = {version = "^5.10.1", optional = true, python = "<3.9"}
jsonschema = "^4.9"
meltano-flask-security = "^0.1.0"
packaging = "^21.3"
psutil = "^5.6.3"
psycopg2-binary = "^2.8.5"
pyhumps = "^3.0.0"
pymssql = {version = "^2.2.5", optional = true}
python = ">=3.7,<3.12"
python-dotenv = "^0.20.0"
python-gitlab = "^3.5.0"
pyyaml = "^6.0.0"
requests = "^2.23.0"
rich = "^12.5.1"
"ruamel.yaml" = "^0.17.21"
smart-open = {version = "^6.2.0"}
smtpapi = "^0.4.1"
snowplow-tracker = "^0.10.0"
sqlalchemy = "^1.3.19"
structlog = "^21.2.0"
tzlocal = "^4.2.0"
uvicorn = {extras = ["standard"], version = "^0.17.6"}
virtualenv = "^20.17.1"
werkzeug = ">=2.1,<=2.1.3"

[tool.poetry.extras]
azure = ["azure-storage-blob", "azure-common", "azure-core"]
gcs = ["google-cloud-storage"]
infra = ["ansible"]
mssql = ["pymssql"]
repl = ["ipython"]
s3 = ["boto3"]

[tool.poetry.scripts]
meltano = "meltano.cli:main"

[tool.pytest.ini_options]
addopts = "--cov=meltano --cov=tests --doctest-modules --order-scope=module -ra -n auto --dist=loadfile"
asyncio_mode = "auto"
log_cli = 1
log_cli_format = "%(message)s"
log_cli_level = "CRITICAL"
log_file = "pytest.log"
log_file_date_format = "%Y-%m-%d %H:%M:%S"
log_file_format = "%(asctime)s [%(levelname)8s] %(message)s (%(filename)s:%(lineno)s)"
log_file_level = "DEBUG"
markers = [
  "backend(type): backend specific test",
  "meta: meta test",
  "concurrent: test requires true concurrency",
  "slow: slow test",
]
testpaths = "tests"

[tool.coverage.run]
branch = true
concurrency = [
  "multiprocessing",
  "thread",
]
parallel = true
source = ["meltano"]

[tool.coverage.paths]
source = [
  "src",
  "**/site-packages/meltano",
  "**/site-packages/meltano*/meltano",
]

[tool.coverage.report]
exclude_lines = [
  "pragma: no cover",
  "if TYPE_CHECKING:",
  "\\.\\.\\.",
]
precision = 2
show_missing = true
skip_covered = true

[tool.mypy]
files = "src"
plugins = [
  "sqlalchemy.ext.mypy.plugin",
]

# The following whitelist is used to allow for incremental adoption
# of MyPy. Modules should be removed from this whitelist as and when
# their respective type errors have been addressed. No new modules
# should be added to this whitelist.
[[tool.mypy.overrides]]
ignore_errors = true
module = [
  "meltano.api.*",
  "meltano.cli.*",
  "meltano.oauth.*",
  # Way too many modules at the root of meltano.core to tackle them all at once  # so listing them individually here.
  "meltano.core.cli_messages",
  "meltano.core.config_service",
  "meltano.core.connection_service",
  "meltano.core.db",
  "meltano.core.discovery_file",
  "meltano.core.elt_context",
  "meltano.core.environment_service",
  "meltano.core.extract_utils",
  "meltano.core.extractor",
  "meltano.core.meltano_file",
  "meltano.core.meltano_invoker",
  "meltano.core.migration_service",
  "meltano.core.models",
  "meltano.core.plugin_discovery_service",
  "meltano.core.plugin_install_service",
  "meltano.core.plugin_invoker",
  "meltano.core.plugin_location_remove",
  "meltano.core.plugin_lock_service",
  "meltano.core.plugin_test_service",
  "meltano.core.project",
  "meltano.core.project_add_service",
  "meltano.core.project_files",
  "meltano.core.project_init_service",
  "meltano.core.project_plugins_service",
  "meltano.core.project_settings_service",
  "meltano.core.select_service",
  "meltano.core.setting",
  "meltano.core.setting_definition",
  "meltano.core.settings_service",
  "meltano.core.settings_store",
  "meltano.core.sqlalchemy",
  "meltano.core.task_sets",
  "meltano.core.task_sets_service",
  "meltano.core.transform_add_service",
  "meltano.core.venv_service",
  "meltano.core.yaml",
  # Meltano Core submodules
  "meltano.core.behavior.*",
  "meltano.core.block.*",
  "meltano.core.bundle.*",
  "meltano.core.compiler.*",
  "meltano.core.job.*",
  "meltano.core.legacy_tracking.*",
  "meltano.core.logging.*",
  "meltano.core.m5o.*",
  "meltano.core.plugin.*",
  "meltano.core.runner.*",
  "meltano.core.sql.*",
  "meltano.core.tracking.*",
  "meltano.core.utils.*",
]

[build-system]
requires = ["poetry-core==1.4.0"]
build-backend = "build:api"
backend-path = ["scripts"]
