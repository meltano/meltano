.test:
  extends: .parallel:python_image_version
  stage: test
  image:
    name: $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA-python$PYTHON_IMAGE_VERSION
    entrypoint: [""]
  before_script:
    - pip install poetry

    # Workaround for https://github.com/python-poetry/poetry/issues/3199
    - poetry config experimental.new-installer false

    - poetry install

lint:
  extends: .test
  parallel:
    matrix:
      # Lint only on 'primary' python version:
      - PYTHON_IMAGE_VERSION: ["3.8"]
  script:
    - make show_lint

.pytest:
  extends: .test
  script:
    - poetry run pytest -v --cov-report= --cov meltano -m "$PYTEST_MARKERS"
    - poetry run coverage combine .coverage
    - poetry run coverage report
    - poetry run coverage html
  artifacts:
    paths:
      - htmlcov/
    when: on_success

.pytest_postgres:
  extends: .pytest
  variables:
    PYTEST_BACKEND: postgresql

    # `postgres` service configuration
    POSTGRES_HOST_AUTH_METHOD: trust
    POSTGRES_ADDRESS: postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: runner
    POSTGRES_PASSWORD: ""
    POSTGRES_DB: pytest_warehouse

    # `target-postgres` configuration
    PG_ADDRESS: $POSTGRES_ADDRESS
    PG_PORT: $POSTGRES_PORT
    PG_USERNAME: $POSTGRES_USER
    PG_PASSWORD: $POSTGRES_PASSWORD
    PG_DATABASE: $POSTGRES_DB
  services:
    - postgres:11

.pytest_sqlite:
  extends: .pytest
  variables:
    PYTEST_BACKEND: sqlite

    # `target-sqlite` configuration
    SQLITE_DATABASE: pytest_warehouse

.pytest_concurrent:
  variables:
    PYTEST_MARKERS: concurrent
  tags:
    - concurrent
  when: manual

pytest_postgres:
  extends: .pytest_postgres
  variables:
    PYTEST_MARKERS: not concurrent

pytest_postgres_concurrent:
  extends:
    - .pytest_postgres
    - .pytest_concurrent

pytest_sqlite:
  extends: .pytest_sqlite
  variables:
    PYTEST_MARKERS: not concurrent

pytest_sqlite_concurrent:
  extends:
    - .pytest_sqlite
    - .pytest_concurrent
