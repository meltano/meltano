# Manually-triggered pipelines which perform predefined automated actions (gitops)

sync_discovery_yml_from_hub:
  when: manual
  except:
    - tags
  stage: docs
  before_script:
    # - git config --global user.name "${GITLAB_USER_NAME}"
    # - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.email "hello@meltano.com"
    - git config --global user.name "Gitlab CI (bot)"
  variables:
    DISCOVERY_URL: https://gitlab.com/meltano/hub/-/raw/main/_data/meltano/discovery.yml
  script:
    - |
      echo "Setting up 'discovery.yml' sync from 'hub.meltano.com'..."
      echo "Current location: Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
    - |
      echo "Downloading discovery.yml from '$DISCOVERY_URL'..."
      echo "# This is a bundled version of discovery.yml" > src/meltano/core/bundle/discovery.yml
      echo -e "# Please see $DISCOVERY_URL for latest updates.\n\n" >> src/meltano/core/bundle/discovery.yml
      curl $DISCOVERY_URL >> src/meltano/core/bundle/discovery.yml
    - |
      echo "Adding to git..."
      git add src/meltano/core/bundle/discovery.yml
      git diff
    - |
      echo "Prepping remote and local branch refs..."
      [[ $CI_COMMIT_REF_NAME == *master ]] && REMOTE_BRANCH="auto-discovery-sync-$(date +%Y-%m-%d)";
      [[ $CI_COMMIT_REF_NAME == *master ]] && echo "Detected main/master branch. Initializing branch: '$REMOTE_BRANCH'";
      [[ $CI_COMMIT_REF_NAME == *master ]] && git branch $REMOTE_BRANCH;
      [[ $CI_COMMIT_REF_NAME == *master ]] || echo "Detected non-main branch: '$CI_COMMIT_REF_NAME'. Committing directly.";
      [[ $CI_COMMIT_REF_NAME == *master ]] || REMOTE_BRANCH="$CI_COMMIT_REF_NAME";
    - git commit -m "sync from '$DISCOVERY_URL', $(date +%Y-%m-%d)"
    - git push http://root:$CI_COMMITS_GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$REMOTE_BRANCH

version_bump_trigger:
  # This job triggers for any branches named like `release/vX.Y.Z`
  # The job will automatically flush the changelog, bump version refs,
  # and commit and push the result back to the branch.
  extends:
    - .only:release-branches
  except:
    - tags
  stage: docs
  before_script:
    # - git config --global user.name "${GITLAB_USER_NAME}"
    # - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.email "hello@meltano.com"
    - git config --global user.name "Gitlab CI (bot)"
    - pip install changelog-cli bumpversion
    # - poetry install
  script:
    - |
      echo "Setting up 'discovery.yml' sync from 'hub.meltano.com'..."
      echo "Current location: Ref='$CI_COMMIT_REF_NAME' and Namespace='$CI_PROJECT_NAMESPACE'..."
    - |
      echo "Detecting and validating version number..."
      CURR_VER="$(bumpversion major --allow-dirty --dry-run --list | grep current_version= | cut -d'=' -f2)"
      NEW_VER="${CI_COMMIT_REF_NAME#release/v}"
      echo "Detected current version '$CURR_VER' and new version '$NEW_VER'"
      [[ "$CURR_VER" == "" ]] && echo "Could not detect current version" && exit 1
      [[ "$NEW_VER" == "" ]] && echo "Could not detect new version" && exit 1
      [[ "$NEW_VER" == "$CURR_VER" ]] && echo "Version is already bumped. Aborting job." && exit 0
      MAJOR_BUMP="$(bumpversion major --allow-dirty --dry-run --list | grep new_version= | cut -d'=' -f2)"
      MINOR_BUMP="$(bumpversion minor --allow-dirty --dry-run --list | grep new_version= | cut -d'=' -f2)"
      PATCH_BUMP="$(bumpversion patch --allow-dirty --dry-run --list | grep new_version= | cut -d'=' -f2)"
      [[ $NEW_VER = $MAJOR_BUMP ]] && BUMP_TYPE="major"
      [[ $NEW_VER = $MINOR_BUMP ]] && BUMP_TYPE="minor"
      [[ $NEW_VER = $PATCH_BUMP ]] && BUMP_TYPE="patch"
      [[ "$BUMP_TYPE" == "" ]] && echo "Could not detect version bump type from version text '$NEW_VER'" && exit 1
      echo "Detected bump type '$BUMP_TYPE' from '$CURR_VER' to '$NEW_VER'"
      echo "Flushing changelog entries with '--$BUMP_TYPE' flag..."
      changelog release --$BUMP_TYPE --yes
      echo "Adding changelog to git..."
      git add CHANGELOG.md
      echo "Bumping version entries..."
      bumpversion $BUMP_TYPE --tag --allow-dirty --new-version=$NEW_VER
      echo "Pushing branch updates..."
      git push http://root:$CI_COMMITS_GITLAB_TOKEN@$CI_SERVER_HOST/$CI_PROJECT_PATH.git HEAD:$CI_COMMIT_REF_NAME
