.sample_code:
  extends: .parallel:python_version
  stage: test
  image: python:$PYTHON_VERSION
  variables:
    # `postgres` service configuration
    POSTGRES_ADDRESS: postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: meltano
    POSTGRES_PASSWORD: meltano
    POSTGRES_DB: demo-warehouse

    # `tap-covid-19` extractor configuration
    # TAP_COVID_19_API_TOKEN: set through https://gitlab.com/meltano/meltano/-/settings/ci_cd

    MELTANO_DISABLE_TRACKING: "true"
  services:
    - postgres:11

homepage_sample_code:
  extends: .sample_code
  script:
    ### https://docs.meltano.com/guide/installation

    # For these examples to work, ensure that:
    # - you are running Linux or macOS
    # - Python 3.7, 3.8, or 3.9 has been installed
    - python3 --version

    # Create directory for Meltano projects
    - mkdir meltano-projects
    - cd meltano-projects

    # Create and activate virtual environment
    - python3 -m venv .venv
    - source .venv/bin/activate

    # Install Meltano
    - pip3 install -U pip
    - pip3 install ..


    ### https://docs.meltano.com/concepts/project

    # Initialize a new Meltano project
    - meltano init demo-project

    # Before using a `meltano` command, ensure that:
    # - you have navigated to your Meltano project
    - cd demo-project
    # - you have activated the virtual environment
    - source ../.venv/bin/activate


    ### ---
    # Always use the latest discovery file
    - ln -s ../../src/meltano/core/bundle/discovery.yml
    ### ---


    ### https://docs.meltano.com/guide/integration

    # Add GitLab extractor to your project
    - meltano add extractor tap-gitlab

    # Configure tap-gitlab to extract data from...
    # - the https://gitlab.com/meltano/meltano project
    - meltano config tap-gitlab set projects meltano/meltano
    # - going back to May 1st, 2020
    - meltano config tap-gitlab set start_date 2021-03-01T00:00:00Z

    # Select all attributes of the "tags" entity
    - meltano select tap-gitlab tags "*"

    # Add JSONL loader
    - meltano add loader target-jsonl

    # Ensure target-jsonl output directory exists
    - mkdir -p output

    # Run data integration pipeline
    - meltano elt tap-gitlab target-jsonl --job_id=gitlab-to-jsonl

    # Read latest tag
    - head -n 1 output/tags.jsonl


    ### https://docs.meltano.com/guide/transformation

    # For these examples to work, ensure that:
    # - you have PostgreSQL running somewhere
    # - you have created a new database
    # - you change the configuration below as appropriate

    # Add PostgreSQL loader
    - meltano add loader target-postgres --variant meltano

    # Configure target-postgres through the environment
    - export TARGET_POSTGRES_HOST=$POSTGRES_ADDRESS
    - export TARGET_POSTGRES_PORT=$POSTGRES_PORT
    - export TARGET_POSTGRES_USER=$POSTGRES_USER
    - export TARGET_POSTGRES_PASSWORD=$POSTGRES_PASSWORD
    - export TARGET_POSTGRES_DBNAME=$POSTGRES_DB

    # Add dbt transformer and initialize dbt project
    - meltano add transformer dbt

    # Add PostgreSQL-compatible dbt models for tap-gitlab
    - meltano add transform tap-gitlab

    # Select all attributes of all entities
    - meltano select tap-gitlab "*" "*"

    # Run data integration and transformation pipeline
    - meltano elt tap-gitlab target-postgres --transform=run --job_id=gitlab-to-postgres

    # Start `psql` shell connected to warehouse database
    - apt-get update -y
    - apt-get install -y postgresql-client # Only do this now to ensure Meltano can be installed without PostgreSQL
    - PGPASSWORD=$TARGET_POSTGRES_PASSWORD psql -U $TARGET_POSTGRES_USER -h $TARGET_POSTGRES_HOST -p $TARGET_POSTGRES_PORT -d $TARGET_POSTGRES_DBNAME -c "SELECT * FROM analytics.gitlab_tags LIMIT 1;"


    ### https://docs.meltano.com/guide/orchestration

    # Schedule pipelines
    - meltano schedule gitlab-to-jsonl tap-gitlab target-jsonl @hourly
    - meltano schedule gitlab-to-postgres tap-gitlab target-postgres @daily --transform=run

    # List scheduled pipelines
    - meltano schedule list

    # Add Airflow orchestrator
    - meltano add orchestrator airflow

    ### ---
    # View Airflow version
    - meltano invoke airflow version
    ### ---

    # Start the Airflow scheduler (add `-D` to background)
    # meltano invoke airflow scheduler

    # Start the Airflow web interface (add `-D` to background)
    # meltano invoke airflow webserver


    ### https://docs.meltano.com/guide/containerization

    # For these examples to work, ensure that
    # Docker has been installed
    # docker --version

    # Add Docker files to your project
    - meltano add files docker

    # Build Docker image containing
    # Meltano, your project, and all of its plugins
    # docker build --tag meltano-demo-project:dev .

    # View Meltano version
    # docker run meltano-demo-project:dev --version

    # Run gitlab-to-jsonl pipeline with
    # mounted volume to exfiltrate target-jsonl output
    # docker run \
    #   --volume $(pwd)/output:/project/output \
    #   meltano-demo-project:dev \
    #   elt tap-gitlab target-jsonl --job_id=gitlab-to-jsonl
  after_script:
    - echo "If this pipeline failed due to Gitlab API returning a non-2xx status code you can try rerunning this job."
    - echo "If the failure persists or you're encountering another error feel free reach out via Gitlab or Slack."

  artifacts:
    paths:
      - meltano-projects/demo-project/meltano.yml
      - meltano-projects/demo-project/output
    when: always

getting_started_sample_code:
  extends: .sample_code
  script:
    ### https://docs.meltano.com/getting-started#install-meltano

    - mkdir meltano-projects
    - cd meltano-projects

    - python3 -m venv .venv
    - source .venv/bin/activate

    - pip3 install -U pip
    - pip3 install ..

    - meltano --version

    # docker pull meltano/meltano:latest

    # docker run meltano/meltano --version


    ### https://docs.meltano.com/getting-started#create-your-meltano-project

    - meltano init my-meltano-project

    - cd my-meltano-project

    # git init
    # git add --all
    # git commit -m 'Initial Meltano project'

    ### ---
    # Always use the latest discovery file
    - ln -s ../../src/meltano/core/bundle/discovery.yml
    ### ---


    ### https://docs.meltano.com/getting-started#add-an-extractor-to-pull-data-from-a-source

    - meltano discover extractors

    - meltano add extractor tap-gitlab

    - printf "tap_covid_19\ntap-covid-19\ntap-covid-19\ncatalog,discover,state\napi_token,user_agent,start_date\n" | meltano add --custom extractor tap-covid-19

    - meltano invoke tap-gitlab --help

    - meltano config tap-gitlab list

    - meltano config tap-gitlab set projects meltano/meltano
    - meltano config tap-gitlab set start_date 2021-03-01T00:00:00Z

    - meltano config tap-gitlab

    - meltano select tap-gitlab --list --all

    - meltano select tap-gitlab commits id
    - meltano select tap-gitlab commits project_id
    - meltano select tap-gitlab commits created_at
    - meltano select tap-gitlab commits author_name
    - meltano select tap-gitlab commits message
    - meltano select tap-gitlab tags "*"
    - meltano select tap-gitlab --exclude "*" "*_url"

    - meltano select tap-gitlab --list


    ### https://docs.meltano.com/getting-started#add-a-loader-to-send-data-to-a-destination

    - meltano discover loaders

    - meltano add loader target-postgres

    - printf "bigquery\ntarget-bigquery\ntarget-bigquery\nproject_id,dataset_id,table_id,validate_records\n" | meltano add --custom loader target-bigquery

    - meltano invoke target-postgres --help

    - meltano config target-postgres list

    - meltano config target-postgres set host $POSTGRES_ADDRESS
    - meltano config target-postgres set port $POSTGRES_PORT
    - meltano config target-postgres set user $POSTGRES_USER
    - meltano config target-postgres set password $POSTGRES_PASSWORD
    - meltano config target-postgres set dbname $POSTGRES_DB
    - meltano config target-postgres set default_target_schema public

    - meltano config target-postgres


    ### https://docs.meltano.com/getting-started#run-a-data-integration-el-pipeline

    - meltano elt tap-gitlab target-postgres --job_id=gitlab-to-postgres


    ### https://docs.meltano.com/getting-started#run-a-data-integration-el-pipeline

    - meltano schedule gitlab-to-postgres tap-gitlab target-postgres @daily

    - meltano schedule list

    - meltano add orchestrator airflow

    ### ---
    - meltano invoke airflow version
    ### ---

    # meltano invoke airflow scheduler
    # meltano invoke airflow scheduler -D

    # meltano invoke airflow webserver
    # meltano invoke airflow webserver -D
  after_script:
    - echo "If this pipeline failed due to Gitlab API returning a non-2xx status code you can try rerunning this job."
    - echo "If the failure persists or you're encountering another error feel free reach out via Gitlab or Slack."

  artifacts:
    paths:
      - meltano-projects/my-meltano-project/meltano.yml
    when: always
