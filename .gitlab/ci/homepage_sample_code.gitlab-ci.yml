homepage_sample_code:
  stage: test
  image: python:3.6
  variables:
    # `postgres` service configuration
    POSTGRES_HOST_AUTH_METHOD: trust
    POSTGRES_ADDRESS: postgres
    POSTGRES_PORT: 5432
    POSTGRES_USER: meltano
    POSTGRES_PASSWORD: ""
    POSTGRES_DB: demo-warehouse

    # `tap-covid-19` extractor configuration
    # TAP_COVID_19_API_TOKEN: set through https://gitlab.com/meltano/meltano/-/settings/ci_cd
  services:
    - postgres:11
  before_script:
    - apt-get update -y
    - apt-get install -y postgresql-client
  script:
    ### https://meltano.com/#installation

    # For these examples to work, ensure that:
    # - you are running Linux or macOS
    # - Python 3.6 or 3.7 has been installed
    - python3 --version

    # Create directory for Meltano projects
    - mkdir meltano-projects
    - cd meltano-projects

    # Create and activate virtual environment
    - python3 -m venv .venv
    - source .venv/bin/activate

    # Install Meltano
    - pip3 install ..


    ### https://meltano.com/#meltano-init

    # Initialize a new Meltano project in the
    # "demo-project" directory, and...
    # - share anonymous usage data with the Meltano team
    #   to help them gauge interest in Meltano and its
    #   features and drive development time accordingly:
    # meltano init demo-project
    # - OR don't share anything with the Meltano team
    #   about this specific project:
    - meltano init demo-project --no_usage_stats
    # - OR don't share anything with the Meltano team
    #   about any project I initialize ever:
    # SHELLRC=~/.$(basename $SHELL)rc # ~/.bashrc, ~/.zshrc, etc
    # echo "export MELTANO_DISABLE_TRACKING=1" >> $SHELLRC
    # meltano init demo-project # --no_usage_stats is implied

    # Before you use any `meltano` command, ensure that:
    # - you have navigated to your Meltano project directory
    - cd demo-project
    # - you have activated the virtual environment
    - source ../.venv/bin/activate

    # If this were an existing Meltano project you just
    # cloned or pulled, install any missing plugins
    # meltano install


    ### ---
    # Always use the latest discovery file
    - ln -s ../../src/meltano/core/bundle/discovery.yml
    ### ---


    ### https://meltano.com/#integration

    # Add GitLab extractor to your project
    - meltano add extractor tap-gitlab

    # Configure tap-gitlab to extract data from...
    # - the https://gitlab.com/meltano/meltano project
    - meltano config tap-gitlab set projects meltano/meltano
    # - going back to May 1st, 2020
    - meltano config tap-gitlab set start_date 2020-05-01

    # Add JSONL loader
    - meltano add loader target-jsonl

    # Ensure target-jsonl output directory exists
    - mkdir -p output

    # Run data integration pipeline
    - meltano elt tap-gitlab target-jsonl --job_id=gitlab-to-jsonl

    # Read latest tag
    - head -n 1 output/tags.jsonl


    ### https://meltano.com/#transformation

    # For these examples to work, ensure that:
    # - you have PostgreSQL running somewhere
    # - you have created a new database
    # - you change the configuration below as appropriate

    # Add PostgreSQL loader
    - meltano add loader target-postgres

    # Configure target-postgres through the environment
    - export PG_ADDRESS=$POSTGRES_ADDRESS
    - export PG_PORT=$POSTGRES_PORT
    - export PG_USERNAME=$POSTGRES_USER
    - export PG_PASSWORD=$POSTGRES_PASSWORD
    - export PG_DATABASE=$POSTGRES_DB

    # Add PostgreSQL-compatible dbt models for tap-gitlab
    - meltano add transformer dbt
    - meltano add transform tap-gitlab

    # Run data integration and transformation pipeline
    - meltano elt tap-gitlab target-postgres --transform=run --job_id=gitlab-to-postgres

    # Start `psql` shell connected to warehouse database
    - PGPASSWORD=$PG_PASSWORD psql -U $PG_USERNAME -h $PG_ADDRESS -p $PG_PORT -d $PG_DATABASE -c "SELECT * FROM analytics.gitlab_tags LIMIT 1;"


    ### https://meltano.com/#orchestration

    # Schedule pipelines
    - meltano schedule gitlab-to-jsonl tap-gitlab target-jsonl @hourly
    - meltano schedule gitlab-to-postgres tap-gitlab target-postgres @daily --transform=run

    # Add Airflow orchestrator
    - meltano add orchestrator airflow

    # Start the Airflow scheduler (add `-D` to background)
    # meltano invoke airflow scheduler

    # Start the Airflow web interface (add `-D` to background)
    # - meltano invoke airflow webserver


    ### https://meltano.com/#meltano-add

    # List extractors and loaders known to Meltano
    - meltano discover extractors
    - meltano discover loaders

    # Add a known extractor or loader by name
    - meltano add extractor tap-salesforce
    - meltano add loader target-snowflake

    # Add an unknown (custom) extractor or loader
    - printf "tap_covid_19\ntap-covid-19\ntap-covid-19\ncatalog,discover,state\napi_token,user_agent,start_date\n" | meltano add --custom extractor tap-covid-19


    ### https://meltano.com/#meltano-config

    # List available plugin settings
    # with their names and environment variables
    - meltano config tap-covid-19 list

    # Store non-sensitive plugin configuration in
    # your project's `.meltano/meltano.db`
    - meltano config tap-covid-19 set start_date "2020-01-01T00:00:00Z"
    - meltano config tap-covid-19 set user_agent "tap-covid-19 via Meltano via GitLab CI"

    # Store sensitive plugin configuration in...
    # - the current shell environment, for one-off use:
    # export TAP_COVID_19_API_TOKEN="<your_github_api_token>"
    # - OR your project's `.env`, for repeated use:
    # touch .env
    # echo "TAP_COVID_19_API_TOKEN=<your_github_api_token>" >> .env

    # Unset configuration stored in `.meltano/meltano.db`
    # meltano config tap-covid-19 unset api_token

    # Reset configuration stored in `.meltano/meltano.db`
    # meltano config tap-covid-19 reset

    # View configuration, independent of storage method
    - meltano config tap-covid-19


    ### https://meltano.com/#meltano-select

    # List all available entities and properties
    - meltano select --list --all tap-covid-19

    # Include all properties of an entity
    - meltano select tap-covid-19 "eu_ecdc_daily" "*"

    # Include specific properties of an entity
    - meltano select tap-covid-19 "eu_daily" "date"
    - meltano select tap-covid-19 "eu_daily" "country"
    - meltano select tap-covid-19 "eu_daily" "cases"
    - meltano select tap-covid-19 "eu_daily" "deaths"

    # Exclude matching properties of all entities
    - meltano select tap-covid-19 --exclude "*" "git_*"

    # List selected (enabled) entities and properties
    - meltano select --list tap-covid-19
  artifacts:
    paths:
      - meltano-projects/demo-project/meltano.yml
      - meltano-projects/demo-project/output
    when: always