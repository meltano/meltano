variables:
  LICENSE_MANAGEMENT_SETUP_CMD: ''  # If needed, specify a command to setup your environment with a custom package manager.
  LICENSE_FINDER_CLI_OPTS: "--enabled-package-managers=pip --python-version=3 --decisions-file=license_finder/dependency_decisions.yml"

license_scanning:
  stage: test
  image:
    name: "$CI_REGISTRY_IMAGE/license_finder:latest"
    entrypoint: []
  variables:
    LM_REPORT_VERSION: '2.1'
    SETUP_CMD: $LICENSE_MANAGEMENT_SETUP_CMD
  allow_failure: true
  before_script:
    # generate requirements.txt
    - pip install poetry
    - poetry export --format requirements.txt --output poetry_requirements.txt --without-hashes
    # remove annotations
    - sed 's/;.*//' poetry_requirements.txt >> plain_requirements.txt
    # remove failing dependencies
    - grep -vE "^click-default-group==|^pyhocon==|^watchdog==" plain_requirements.txt >> requirements.txt
  script:
    - /run.sh analyze . | tee -a license_management.log
  after_script:
    - echo "$(tail license_management.log)"
  artifacts:
    reports:
      license_scanning: gl-license-scanning-report.json
    paths:
      - license_management.log
  dependencies: []
  rules:
    - if: $LICENSE_MANAGEMENT_DISABLED
      when: never
    - if: $CI_COMMIT_BRANCH &&
          $GITLAB_FEATURES =~ /\blicense_scanning\b/
