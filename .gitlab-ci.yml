image: python:3.6
variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache"

include:
  - "/docker/build-ci.yml"

stages:
  - lint
  - build_base
  - build
  - test
  - publish
  - review
  - production
  - dockerhub

cache:
  paths:
    - .cache/pip
    - venv/

lint:
  stage: lint
  before_script:
    - pip install black
  script:
    - make show_lint

.test:
  stage: test
  before_script:
    - pip install '.[dev]'
  script:
    - pytest -v
  allow_failure: true

.pages:
  script:
    - pip install sphinx sphinx-rtd-theme
    - cd doc ; make html
    - mv build/html/ ../public/
  artifacts:
    paths:
    - public
  only:
    - master

publish:
  stage: publish
  before_script:
    - pip install twine
  script:
    - python setup.py sdist
    - twine upload dist/*
  only:
    - master
    - dev
  when: manual

.docker_build: &docker_build
  image: docker:latest
  stage: build
  variables:
    DOCKERFILE: .
    DOCKER_DRIVER: overlay2
  services:
    - docker:dind
  script:
    - export DOCKER_IMAGE_NAME=${IMAGE_NAME:-$CI_REGISTRY_IMAGE}
    - export DOCKER_IMAGE_TAG=${IMAGE_TAG:-$CI_COMMIT_SHA}
    - docker login -u gitlab-ci-token -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker build -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG -f $DOCKERFILE .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG

.dev_build_meltano:
  <<: *docker_build
  image: docker:latest
  variables:
    IMAGE_NAME: meltano
    DOCKERFILE: ./docker/Dockerfile
  except:
    - master

.build_meltano:
  <<: *docker_build
  variables:
    IMAGE_NAME: meltano
    IMAGE_TAG: latest
    DOCKERFILE: ./docker/Dockerfile
  only:
    - master

.review:
  image: silvs/kubectl:latest
  stage: review
  script:
    - echo ""
  only:
    - branches
  except:
    - master

meltano_base_hub:
  <<: *docker_build
  stage: build_base
  variables:
    DOCKERFILE: docker/base/Dockerfile
    IMAGE_NAME: meltano/base
    IMAGE_TAG: base-v$CI_COMMIT_TAG
  script:
    - docker login -u $DOCKER_HUB_USER -p $DOCKER_HUB_PASSWORD
    - docker build -t $IMAGE_NAME:$IMAGE_TAG -f $DOCKERFILE .
    - docker push $IMAGE_NAME:$IMAGE_TAG
  only:
    - tags

dev_meltano_base:
  <<: *docker_build
  stage: build_base
  variables:
    DOCKERFILE: docker/base/Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE/base
  only:
    - branches

meltano_base:
  <<: *docker_build
  stage: build_base
  variables:
    DOCKERFILE: docker/base/Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE/base
    IMAGE_TAG: latest
  only:
    - master

dev_meltano:
  <<: *docker_build
  variables:
    DOCKERFILE: docker/prod/Dockerfile
  before_script:
    # replace the FROM ... in the Dockerfile to use this branch's image
    - sed -i "1s#.*#FROM $CI_REGISTRY_IMAGE/base:$CI_COMMIT_SHA#" $DOCKERFILE
  except:
    - master

meltano:
  <<: *docker_build
  variables:
    DOCKERFILE: docker/prod/Dockerfile
    IMAGE_TAG: latest
  before_script:
    # replace the FROM ... in the Dockerfile to use this branch's image
    - sed -i "1s#.*#FROM $CI_REGISTRY_IMAGE/base#" $DOCKERFILE
  only:
    - master

dev_meltano_cli:
  <<: *docker_build
  stage: build_base
  variables:
    DOCKERFILE: docker/cli/Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE/cli
  except:
    - master

meltano_cli:
  <<: *docker_build
  stage: build_base
  variables:
    DOCKERFILE: docker/cli/Dockerfile
    IMAGE_NAME: $CI_REGISTRY_IMAGE/cli
    IMAGE_TAG: latest
  only:
    - master

production:
  image: silvs/kubectl:latest
  stage: production
  environment:
    name: production
    url: https://melt.gitlab-bizops.com
  script:
    - cd app/chart/meltano
    - helm init --client-only
    - helm dep update
    - helm upgrade --install --namespace default meltano . --set image.repository=$CI_REGISTRY_IMAGE/meltano,image.tag=base-$CI_COMMIT_SHA,ingress.enabled=true,'global.ingress.hosts[0]=melt.gitlab-bizops.com','global.ingress.tls[0].hosts[0]=melt.gitlab-bizops.com','global.ingress.tls[0].secretName=melt-tls',postgresql.postgresPassword=$POSTGRES_PASSWORD,oauth2-proxy.clientId=$OAUTH2_PROXY_CLIENT_ID,oauth2-proxy.clientSecret=$OAUTH2_PROXY_CLIENT_SECRET,oauth2-proxy.cookieSecret=$OAUTH2_PROXY_COOKIE_SECRET,oauth2-proxy.enabled=true,global.oauth2-proxy.enabled=true,oauth2-proxy.emailDomain=gitlab.com,oauth2-proxy.gitlabHost=https://dev.gitlab.org
  only:
    - master
